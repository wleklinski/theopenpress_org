/*
 * strip unit
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}


/*
 * convert pixels-to-em
 */
@function em($value, $base-value: $base-font-size)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if ($value == 0em) { $value: 0; } // Turn 0em into 0
  @return $value;
}


/*
 * convert pixels-to-rem
 */
@function rem($value, $base-value: $base-font-size)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}


/*
 * tint & shade
 */
@function tint($color, $percent){
  @return mix(white, $color, $percent);
}

@function shade($color, $percent){
  @return mix(black, $color, $percent);
}


/*
 * blend modes
 * https://github.com/heygrady/scss-blend-modes
 */
@function blend-normal($foreground, $background) {
  $opacity: opacity($foreground);
  $background-opacity: opacity($background);

  // calculate opacity
  $bm-red: red($foreground) * $opacity + red($background) * $background-opacity * (1 - $opacity);
  $bm-green: green($foreground) * $opacity + green($background) * $background-opacity * (1 - $opacity);
  $bm-blue: blue($foreground) * $opacity + blue($background) * $background-opacity * (1 - $opacity);
  @return rgb($bm-red, $bm-green, $bm-blue);
}

@function blend-multiply($foreground, $background) {
  $bm-red: red($background) * red($foreground) / 255;
  $bm-green: green($background) * green($foreground) / 255;
  $bm-blue: blue($background) * blue($foreground) / 255;

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}
